<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task List 2023</title>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <header>
        <form class="search-form" id="search-form" action="/search" method="get" autocomplete="off">
            <input onkeyup="activateClearButton()" type="text" class="search-field clearable" placeholder="Search" id="search-field">
            <button class="search-btn" type="submit">
                <svg class="search-btn-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 21 20" width="21" height="20">
                    <path fill="none" fill-rule="evenodd" stroke-width="2" stroke="#fff" d="M8 1c3.866 0 7 3.134 7 7s-3.134 7-7 7-7-3.134-7-7 3.134-7 7-7zm6.25 12.25l5.5 5.5"></path>
                </svg>
            </button>
            <button class="clear-btn clear-btn-spacing" type="button" id="clear-btn">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" width="14" height="14">
                    <path fill="none" stroke="#666" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" d="M1.6 1.6l12.8 12.8m-12.8 0L14.4 1.6"></path>
                </svg>
            </button>
        </form>
    </header>

    <main>
        <h1>Task List 2023</h1>
        <form id="new-task-form" action="/" method="post" autocomplete="off">
            <input type="text" id="new-task-input" placeholder="Task name" name="taskValue" required/>
            <input type="submit" id="new-task-submit" value="Add task"/>
        </form>

        <section class="task-list">
            <h2>Tasks</h2>
                <div id="tasks">
                    <% if(data) { %>
                        <% data.forEach(todoValue => { %>
                            <div class="task">
                                <div class="content">
                                    <input type="text" class="text" value="<%= todoValue.todo %>" readonly/>
                                </div>
                                <div class="actions">
                                    <button class="edit" data-task-id="<%= todoValue.id %>">Edit</button>
                                    <button class="delete <%= todoValue.id %>">Delete</button>
                                </div>
                            </div>
                        <% }) %>
                    <% } %>
                </div>
        </section>
    </main>

    <script>
        const searchField = document.getElementById("search-field");

        searchField.addEventListener("input", () => {
            const hasContent = searchField.value.length > 0;
            searchField.classList.toggle("filledin", hasContent);
        });

        document.getElementById('clear-btn').onclick = function() {
            document.getElementById("search-field").value = "";
            document.getElementById("search-field").classList = "search-field clearable";
        };

        const searchForm = document.getElementById("search-form");
        searchForm.addEventListener("submit", (event) => {
            event.preventDefault();

            const searchQuery = document.getElementById("search-field").value;
            window.location.href = `/search?q=${searchQuery}`;
        });
    </script>

    <script>
        const deleteButton = document.querySelectorAll(".delete")

        deleteButton.forEach((button, i) => {
            button.addEventListener("click", () => {
                const taskId = `/${button.classList[1]}`

                fetch(taskId, {
                    method: "DELETE"
                })
                window.location.href = "/"
            })
        })

        const editButtons = document.querySelectorAll(".edit");

        editButtons.forEach(button => {
            button.addEventListener("click", () => {
                const taskContainer = button.closest(".task");
                const taskInput = taskContainer.querySelector(".text");
                const taskId = button.getAttribute("data-task-id"); // Get the task ID from data attribute

                if (button.textContent === "Edit") {
                    // Change "Edit" button text to "Save"
                    button.textContent = "Save";

                    // Enable editing of the task input field
                    taskInput.removeAttribute("readonly");
                }
                
                else if (button.textContent === "Save") {
                    // Change "Save" button text to "Edit"
                    button.textContent = "Edit";

                    // Disable editing of the task input field
                    taskInput.setAttribute("readonly", true);

                    // Send a PUT request to update the task
                    fetch(`/${taskId}`, {
                        method: "PUT",
                        headers: {
                        "Content-Type": "application/json"
                        },
                        body: JSON.stringify({ updatedTaskValue: taskInput.value }) // Include the updated text
                    })
                    .then(response => {
                        if (!response.ok) {
                        console.error("Error updating task");
                        }
                    })
                    .catch(error => {
                        console.error("Network error:", error);
                    });
                }
            });
        });
    </script>
</body>
</html>